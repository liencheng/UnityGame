UI 		
	1、资源	
	2、代码	
		a)刷新
		b)异常
		c)不用的脚本
		d)断线重连，等待消息--几个消息大家是怎么用的，统一整理
		e)空引用，重点查看UIManager和DFMUIRoot下的文件
		f)UI相关脚本判空检查--自己的文件自己检查
	3、UI加载流程：保证基本UI的加载不会受到异常的影响（可以将容易抛异常的问题放到UI加载之后）	
		
	4、场景加载梳理	
		战斗场景中是否加载其它场景类型的UI，即UIConfig表中是否配错了
		
		
		
	5、图片在Panel的Softclip模式下无法正常置灰问题修复	
		"当前只修改了Transparent Colored.shader,在Panel的Soft Clip下，NGUI会动态修改图片的shader为Transparent Colored(Soft clip)."
		如果想解决上面的问题，就是把Transparent Colored(Soft clip).shader也修改一下。
		
	6、UI的优化工作	
		"a)使用的注意事项，降低drawcall,降低内存，动态加载，"
		b)关掉label的描边效果
		c)优化ScrollView
		d）缓存GameObject
		
		
	7、UI的管理	
		a)层级的管理
		
		c)刷新的管理
		
		
	8、注意事项	
		a)挂错脚本导致的游戏崩溃问题
		
		b)UI这块容易出现什么问题。
		
	9、关于Panel的depth和特效或者material的renderQueue的关系	
		相机的渲染层次（谁遮罩谁的问题）和renderQueue相关，renderQueue越小的越靠前渲染。NGUI的渲染顺序和Panel的Depth有关，当Panel和特效同时存在时，他们的层级如何来定呢？
		这里要明确的是NGUI中的Panel设置depth对panel渲染队列的影响，UIPanel的渲染队列的初始值为3000（设置为Start At的另算），NGUI会把当前在渲染队列里的所有panel根据depth值从小
		到大排序，然后从小到大设置这些panel的renderQueue。第N个Panel的renderQueue值得计算方法：panel.material.renderQueue =  (n-1)Panel的drawcall数 + (n-2)Panel的drawcall数 + ...+ 3000;
		所以在设置UI和特效的前后顺序时，depth和特效的renderQueue并不能一定决定二者的显示顺序。有效的解决方案就是调整UIPanel的RenderQueue初始值为Start at...
		
	10、游戏中名字的创建除了要屏蔽敏感字符，还需要屏蔽一些特殊字符。这个NGUI并没有提供，所有需要根据汉子的编码范围及一些希望加上的字符，自己加进去。（UIInput类中处理）
		Unicode与UTF8编码方式不同。所以汉字编码范围也不一致。现在有个疑问，UTF8的代码中，却用的是Unicode的编码范围。（Unicode--转换成--UTF8还记得吗？）
	
	11、NGUI的每一次Drawcall都会创建一个GameObject?
		UIPanel每调用一次Drawcall都要TryCreate一个GameObject,并设置其材质，Shader、layer等属性。这些GameObject保存在ActiveDrawcalls和
		DeactiveDrwacall下，在编辑器的Hierarchy下之所以看不多，是因为Unity调用的UnityEditor.EditorUtility.CreateGameObjectWithHideFlags（）设置其为
		不可见。这些GameObject只有在切换场景的时候才会被释放。每一次Drwacall都会检查DeactiveDrawcalls是否还缓存GameObject,如果有就从里面取一个，否则再创建一个。

	12、NGUI坐标问题。
		如何设置NGUi的位移坐标是NGUi经常遇到的问题。NGUi已经为用户管理好了Ui的坐标体系。Unity中分为localPosition和worldPosition两个坐标，在不同的屏幕分辨率中。
	        注： 注意当计算世界的位置时，父级变换的世界旋转和缩放被应用到自身的位置。意思是说Transform.position的1个单位是1个单位，Transform.localPosition的1个单位将由所有祖
		先的缩放获得缩放，简单来说自身位置的1单位将受它上级的缩放影响。

        13、了解一下魔剑之刃的客户端参数。
		UI占用的内存，主城及战斗场景中占用的Drawcall。
